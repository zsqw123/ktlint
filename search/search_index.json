{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Ktlint \u00b6 Kotlin linter in spirit of feross/standard (JavaScript) and gofmt (Go). Features \u00b6 No configuration required ktlint aims to capture the official Kotlin coding conventions and Android Kotlin Style Guide . In some aspects ktlint is a bit more strict * . Rule sets ktlint offers a standard and an experimental rule set. Next to this, it is easy to provide custom rule sets . .editorconfig Some rules do allow further configuration, but in all cases a reasonable default is set when not provided. ktlint primarily uses the .editorconfig file to read default .editorconfig , IntelliJ IDEA specific and Ktlint specific properties. Disable rules If need be, rules can be disabled easily * . Built-in formatter Most lint violations don't need to be fixed manually. ktlint has a built-in formatter which fixes violations when possible. Some violations can not be fixed in a deterministic way, and need manual action. Customizable output Several reporters are available out-of-the-box: plain (+ plain?group_by_file ), json , html and checkstyle . It's also easy to create a custom reporter . Executable jar ktlint is releases as a single executable jar with all dependencies included. Legal \u00b6 This project is not affiliated with nor endorsed by JetBrains. All code, unless specified otherwise, is licensed under the MIT license. Copyright \u00a9 2019 Pinterest, Inc. Copyright \u00a9 2016-2019 Stanley Shyiko.","title":"Home"},{"location":"#welcome-to-ktlint","text":"","title":"Welcome to Ktlint"},{"location":"#features","text":"No configuration required ktlint aims to capture the official Kotlin coding conventions and Android Kotlin Style Guide . In some aspects ktlint is a bit more strict * . Rule sets ktlint offers a standard and an experimental rule set. Next to this, it is easy to provide custom rule sets . .editorconfig Some rules do allow further configuration, but in all cases a reasonable default is set when not provided. ktlint primarily uses the .editorconfig file to read default .editorconfig , IntelliJ IDEA specific and Ktlint specific properties. Disable rules If need be, rules can be disabled easily * . Built-in formatter Most lint violations don't need to be fixed manually. ktlint has a built-in formatter which fixes violations when possible. Some violations can not be fixed in a deterministic way, and need manual action. Customizable output Several reporters are available out-of-the-box: plain (+ plain?group_by_file ), json , html and checkstyle . It's also easy to create a custom reporter . Executable jar ktlint is releases as a single executable jar with all dependencies included.","title":"Features"},{"location":"#legal","text":"This project is not affiliated with nor endorsed by JetBrains. All code, unless specified otherwise, is licensed under the MIT license. Copyright \u00a9 2019 Pinterest, Inc. Copyright \u00a9 2016-2019 Stanley Shyiko.","title":"Legal"},{"location":"faq/","text":"Why should I use ktlint? \u00b6 the short answer is Simplicity . Spending time on configuration (and maintenance down the road) of hundred-line long style config file(s) is counter-productive. Instead of wasting your energy on something that has no business value - focus on what really matters (not debating whether to use tabs or spaces). By using ktlint you put the importance of code clarity and community conventions over personal preferences. This makes things easier for people reading your code as well as frees you from having to document and explain what style potential contributor(s) have to follow. ktlint is a single binary with both linter & formatter included. All you need is to drop it in (no need to get overwhelmed while choosing among dozens of code style options ). Can I have my own rules on top of ktlint? \u00b6 Absolutely, \"no configuration\" doesn't mean \"no extensibility\". You can add your own ruleset(s) to discover potential bugs, check for anti-patterns, etc. See adding a custom rule set for more information. How do I suppress errors for a line/block/file? \u00b6 Tip Suppressing a ktlint violation is meant primarily as an escape latch for the rare cases when ktlint is not able to produce the correct result. Please report any such instances using GitHub Issues ). To disable a specific rule you'll need the rule identifier which is displayed at the end of the lint error. Note that when the rule id is prefixed with a rule set id like experimental , you will need to use that fully qualified rule id. An error can be suppressed using: EOL comments Block comments @Suppress annotations From a consistency perspective seen, it might be best to not mix the (EOL/Block) comment style with the annotation style in the same project. Warning Some rules like the indent rule do not (yet) support disabling of the rule per line or block. It can be disabled for an entire file though. Disabling for one specific line using EOL comment \u00b6 An error for a specific rule on a specific line can be disabled with an EOL comment on that line: import package.* // ktlint-disable no-wildcard-imports In case lint errors for different rules on the same line need to be ignored, then specify multiple rule ids (separated by a space): import package.* // ktlint-disable no-wildcard-imports other-rule-id In case all lint errors on a line need to be ignored, then do not specify the rule id at all: import package.* // ktlint-disable Disabling for a block of lines using Block comments \u00b6 An error for a specific rule in a block of lines can be disabled with an block comment like: /* ktlint-disable no-wildcard-imports */ import package.a.* import package.b.* /* ktlint-enable no-wildcard-imports */ In case lint errors for different rules in the same block of lines need to be ignored, then specify multiple rule ids (separated by a space): /* ktlint-disable no-wildcard-imports other-rule-id */ import package.a.* import package.b.* /* ktlint-enable no-wildcard-imports,other-rule-id */ Note that the ktlint-enable directive needs to specify the exact same rule-id's and in the same order as the ktlint-disable directive. In case all lint errors in a block of lines needs to be ignored, then do not specify the rule id at all: /* ktlint-disable */ import package.a.* import package.b.* /* ktlint-enable */ Disabling for a statement or an entire file using @Suppress \u00b6 Tip As of ktlint version 0.46, it is possible to specify any ktlint rule id via the @Suppress annotation in order to suppress errors found by that rule. Note that some rules like indent still do not support disabling for parts of a file. An error for a specific rule on a specific line can be disabled with a @Suppress annotation: @Suppress ( \"ktlint:max-line-length\" , \"ktlint:experimental:trailing-comma-on-call-site\" ) val foo = listOf ( \"some really looooooooooooooooong string exceeding the max line length\" , ) Note that when using @Suppress each qualified rule id needs to be prefixed with ktlint: . To suppress the violations of all ktlint rules, use: @Suppress ( \"ktlint\" ) val foo = \"some really looooooooooooooooong string exceeding the max line length\" Like with other @Suppress annotations, it can be placed on targets supported by the annotation. As of this it is possible to disable rules in the entire file with: @file : Suppress ( \"ktlint\" ) // Suppressing all rules for the entire file // or @file : Suppress ( \"ktlint:max-line-length\" , \"ktlint:experimental:trailing-comma\" ) // Suppressing specific rules for the entire file How do I globally disable a rule? \u00b6 With .editorConfig property disabled_rules a rule can be disabled globally. You may also pass a list of disabled rules via the --disabled_rules command line flag. It has the same syntax as the EditorConfig property.","title":"FAQ"},{"location":"faq/#why-should-i-use-ktlint","text":"the short answer is Simplicity . Spending time on configuration (and maintenance down the road) of hundred-line long style config file(s) is counter-productive. Instead of wasting your energy on something that has no business value - focus on what really matters (not debating whether to use tabs or spaces). By using ktlint you put the importance of code clarity and community conventions over personal preferences. This makes things easier for people reading your code as well as frees you from having to document and explain what style potential contributor(s) have to follow. ktlint is a single binary with both linter & formatter included. All you need is to drop it in (no need to get overwhelmed while choosing among dozens of code style options ).","title":"Why should I use ktlint?"},{"location":"faq/#can-i-have-my-own-rules-on-top-of-ktlint","text":"Absolutely, \"no configuration\" doesn't mean \"no extensibility\". You can add your own ruleset(s) to discover potential bugs, check for anti-patterns, etc. See adding a custom rule set for more information.","title":"Can I have my own rules on top of ktlint?"},{"location":"faq/#how-do-i-suppress-errors-for-a-lineblockfile","text":"Tip Suppressing a ktlint violation is meant primarily as an escape latch for the rare cases when ktlint is not able to produce the correct result. Please report any such instances using GitHub Issues ). To disable a specific rule you'll need the rule identifier which is displayed at the end of the lint error. Note that when the rule id is prefixed with a rule set id like experimental , you will need to use that fully qualified rule id. An error can be suppressed using: EOL comments Block comments @Suppress annotations From a consistency perspective seen, it might be best to not mix the (EOL/Block) comment style with the annotation style in the same project. Warning Some rules like the indent rule do not (yet) support disabling of the rule per line or block. It can be disabled for an entire file though.","title":"How do I suppress errors for a line/block/file?"},{"location":"faq/#disabling-for-one-specific-line-using-eol-comment","text":"An error for a specific rule on a specific line can be disabled with an EOL comment on that line: import package.* // ktlint-disable no-wildcard-imports In case lint errors for different rules on the same line need to be ignored, then specify multiple rule ids (separated by a space): import package.* // ktlint-disable no-wildcard-imports other-rule-id In case all lint errors on a line need to be ignored, then do not specify the rule id at all: import package.* // ktlint-disable","title":"Disabling for one specific line using EOL comment"},{"location":"faq/#disabling-for-a-block-of-lines-using-block-comments","text":"An error for a specific rule in a block of lines can be disabled with an block comment like: /* ktlint-disable no-wildcard-imports */ import package.a.* import package.b.* /* ktlint-enable no-wildcard-imports */ In case lint errors for different rules in the same block of lines need to be ignored, then specify multiple rule ids (separated by a space): /* ktlint-disable no-wildcard-imports other-rule-id */ import package.a.* import package.b.* /* ktlint-enable no-wildcard-imports,other-rule-id */ Note that the ktlint-enable directive needs to specify the exact same rule-id's and in the same order as the ktlint-disable directive. In case all lint errors in a block of lines needs to be ignored, then do not specify the rule id at all: /* ktlint-disable */ import package.a.* import package.b.* /* ktlint-enable */","title":"Disabling for a block of lines using Block comments"},{"location":"faq/#disabling-for-a-statement-or-an-entire-file-using-suppress","text":"Tip As of ktlint version 0.46, it is possible to specify any ktlint rule id via the @Suppress annotation in order to suppress errors found by that rule. Note that some rules like indent still do not support disabling for parts of a file. An error for a specific rule on a specific line can be disabled with a @Suppress annotation: @Suppress ( \"ktlint:max-line-length\" , \"ktlint:experimental:trailing-comma-on-call-site\" ) val foo = listOf ( \"some really looooooooooooooooong string exceeding the max line length\" , ) Note that when using @Suppress each qualified rule id needs to be prefixed with ktlint: . To suppress the violations of all ktlint rules, use: @Suppress ( \"ktlint\" ) val foo = \"some really looooooooooooooooong string exceeding the max line length\" Like with other @Suppress annotations, it can be placed on targets supported by the annotation. As of this it is possible to disable rules in the entire file with: @file : Suppress ( \"ktlint\" ) // Suppressing all rules for the entire file // or @file : Suppress ( \"ktlint:max-line-length\" , \"ktlint:experimental:trailing-comma\" ) // Suppressing specific rules for the entire file","title":"Disabling for a statement or an entire file using @Suppress"},{"location":"faq/#how-do-i-globally-disable-a-rule","text":"With .editorConfig property disabled_rules a rule can be disabled globally. You may also pass a list of disabled rules via the --disabled_rules command line flag. It has the same syntax as the EditorConfig property.","title":"How do I globally disable a rule?"},{"location":"readme/","text":"Build & test documentation on local machine \u00b6 The documentation of ktlint is served with mkdocs-material . For full documentation visit mkdocs.org . To build and test documentation on your local development machine, follow steps below: In IntelliJ IDEA Open Preferences Search for JSON Schema mappings Add new schema for url https://squidfunk.github.io/mkdocs-material/schema.json and add file mkdocs.yml for this url. Pull docker image $ docker pull squidfunk/mkdocs-material Start mkdocs server from root of project (e.g. from same directory where file mkdocs.yml is located) docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material Visit page http://0.0.0.0:8000/ in your browser. Edit the documentation and explicitly save the file. The mkdocs server refreshes its cached and the current page in the browser is automatically refreshed.","title":"Build & test documentation on local machine"},{"location":"readme/#build-test-documentation-on-local-machine","text":"The documentation of ktlint is served with mkdocs-material . For full documentation visit mkdocs.org . To build and test documentation on your local development machine, follow steps below: In IntelliJ IDEA Open Preferences Search for JSON Schema mappings Add new schema for url https://squidfunk.github.io/mkdocs-material/schema.json and add file mkdocs.yml for this url. Pull docker image $ docker pull squidfunk/mkdocs-material Start mkdocs server from root of project (e.g. from same directory where file mkdocs.yml is located) docker run --rm -it -p 8000 :8000 -v ${ PWD } :/docs squidfunk/mkdocs-material Visit page http://0.0.0.0:8000/ in your browser. Edit the documentation and explicitly save the file. The mkdocs server refreshes its cached and the current page in the browser is automatically refreshed.","title":"Build &amp; test documentation on local machine"},{"location":"contributing/","text":"Contributing guidelines \u00b6","title":"Index"},{"location":"contributing/#contributing-guidelines","text":"","title":"Contributing guidelines"},{"location":"contributing/code-of-conduct/","text":"At Pinterest, we work hard to ensure that our work environment is welcoming and inclusive to as many people as possible. We are committed to creating this environment for everyone involved in our open source projects as well. We welcome all participants regardless of ability, age, ethnicity, identified gender, religion (or lack there of), sexual orientation and socioeconomic status. This code of conduct details our expectations for upholding these values. Good behavior \u00b6 We expect members of our community to exhibit good behavior including (but of course not limited to): Using intentional and empathetic language. Focusing on resolving instead of escalating conflict. Providing constructive feedback. Unacceptable behavior \u00b6 Some examples of unacceptable behavior (again, this is not an exhaustive list): Harassment, publicly or in private. Trolling. Sexual advances (this isn\u2019t the place for it). Publishing other\u2019s personal information. Any behavior which would be deemed unacceptable in a professional environment. Recourse \u00b6 If you are witness to or the target of unacceptable behavior, it should be reported to Pinterest at opensource-policy@pinterest.com. All reporters will be kept confidential and an appropriate response for each incident will be evaluated. If the maintainers do not uphold and enforce this code of conduct in good faith, community leadership will hold them accountable.","title":"Code of conduct"},{"location":"contributing/code-of-conduct/#good-behavior","text":"We expect members of our community to exhibit good behavior including (but of course not limited to): Using intentional and empathetic language. Focusing on resolving instead of escalating conflict. Providing constructive feedback.","title":"Good behavior"},{"location":"contributing/code-of-conduct/#unacceptable-behavior","text":"Some examples of unacceptable behavior (again, this is not an exhaustive list): Harassment, publicly or in private. Trolling. Sexual advances (this isn\u2019t the place for it). Publishing other\u2019s personal information. Any behavior which would be deemed unacceptable in a professional environment.","title":"Unacceptable behavior"},{"location":"contributing/code-of-conduct/#recourse","text":"If you are witness to or the target of unacceptable behavior, it should be reported to Pinterest at opensource-policy@pinterest.com. All reporters will be kept confidential and an appropriate response for each incident will be evaluated. If the maintainers do not uphold and enforce this code of conduct in good faith, community leadership will hold them accountable.","title":"Recourse"},{"location":"contributing/guidelines/","text":"First off, thanks for taking the time to contribute! This guide will answer some common questions about how this project works. While this is a Pinterest open source project, we welcome contributions from everyone. Regular outside contributors can become project maintainers. Help \u00b6 If you're having trouble using this project, please start by reading all documentation and searching for solutions in the existing open and closed issues. Security \u00b6 If you've found a security issue in one of our open source projects, please report it at Bugcrowd ; you may even make some money! Code of Conduct \u00b6 Please be sure to read and understand our CODE_OF_CONDUCT.md . We work hard to ensure that our projects are welcoming and inclusive to as many people as possible. Reporting Issues \u00b6 If you have a bug report, please provide as much information as possible so that we can help you out: Version of the project you're using. Code (or even better a sample project) which reproduce the issue. Steps which reproduce the issue. Stack traces for crashes. Any logs produced. Making Changes \u00b6 Tip ktlint only provides rules that enforce the Kotlin coding conventions or Android Kotlin style guide . If your change is more opinionated than please file an issue first so that it can be discussed amongst the community. Rules which are too opinionated might be better published as a custom rule set. Fork this repository to your own account Make your changes and verify that tests pass Commit your work and push to a new branch on your fork Submit a pull request Participate in the code review process by responding to feedback Once there is agreement that the code is in good shape, one of the project's maintainers will merge your contribution. To increase the chances that your pull request will be accepted: Follow the coding style Write tests for your changes Write a good commit message Provide context in the pull request description. New rules will be added first to the experimental rule set before being promoted to the standard rule set. Updating dependencies \u00b6 This project has enabled Gradle dependencies verification . On adding/updating any dependency, ensure that you've added dependency provided checksum/signature to gradle/verification-metadata.xml file. Using kotlin development versions \u00b6 Add following flag - -PkotlinDev to enable kotlin development version. License \u00b6 By contributing to this project, you agree that your contributions will be licensed under its license .","title":"Guidelines"},{"location":"contributing/guidelines/#help","text":"If you're having trouble using this project, please start by reading all documentation and searching for solutions in the existing open and closed issues.","title":"Help"},{"location":"contributing/guidelines/#security","text":"If you've found a security issue in one of our open source projects, please report it at Bugcrowd ; you may even make some money!","title":"Security"},{"location":"contributing/guidelines/#code-of-conduct","text":"Please be sure to read and understand our CODE_OF_CONDUCT.md . We work hard to ensure that our projects are welcoming and inclusive to as many people as possible.","title":"Code of Conduct"},{"location":"contributing/guidelines/#reporting-issues","text":"If you have a bug report, please provide as much information as possible so that we can help you out: Version of the project you're using. Code (or even better a sample project) which reproduce the issue. Steps which reproduce the issue. Stack traces for crashes. Any logs produced.","title":"Reporting Issues"},{"location":"contributing/guidelines/#making-changes","text":"Tip ktlint only provides rules that enforce the Kotlin coding conventions or Android Kotlin style guide . If your change is more opinionated than please file an issue first so that it can be discussed amongst the community. Rules which are too opinionated might be better published as a custom rule set. Fork this repository to your own account Make your changes and verify that tests pass Commit your work and push to a new branch on your fork Submit a pull request Participate in the code review process by responding to feedback Once there is agreement that the code is in good shape, one of the project's maintainers will merge your contribution. To increase the chances that your pull request will be accepted: Follow the coding style Write tests for your changes Write a good commit message Provide context in the pull request description. New rules will be added first to the experimental rule set before being promoted to the standard rule set.","title":"Making Changes"},{"location":"contributing/guidelines/#updating-dependencies","text":"This project has enabled Gradle dependencies verification . On adding/updating any dependency, ensure that you've added dependency provided checksum/signature to gradle/verification-metadata.xml file.","title":"Updating dependencies"},{"location":"contributing/guidelines/#using-kotlin-development-versions","text":"Add following flag - -PkotlinDev to enable kotlin development version.","title":"Using kotlin development versions"},{"location":"contributing/guidelines/#license","text":"By contributing to this project, you agree that your contributions will be licensed under its license .","title":"License"},{"location":"contributing/overview/","text":"Important Make sure to read the Contributing guideline and the code of conduct first. Development \u00b6 Development starts with cloning and building the project on your local machine: git clone https://github.com/pinterest/ktlint && cd ktlint ./gradlew tasks # shows how to build, test, run, etc. project Tip To open and run ktlint in Intellij IDEA: File -> Open... . You'll also need to set the \"Project language level\" to 8 in \"Project Settings\" ( File -> Project Structure... -> Project ). To run ktlint - right-click on ktlint/src/main/kotlin/com/pinterest/ktlint/Main.kt -> Run .","title":"Overview"},{"location":"contributing/overview/#development","text":"Development starts with cloning and building the project on your local machine: git clone https://github.com/pinterest/ktlint && cd ktlint ./gradlew tasks # shows how to build, test, run, etc. project Tip To open and run ktlint in Intellij IDEA: File -> Open... . You'll also need to set the \"Project language level\" to 8 in \"Project Settings\" ( File -> Project Structure... -> Project ). To run ktlint - right-click on ktlint/src/main/kotlin/com/pinterest/ktlint/Main.kt -> Run .","title":"Development"},{"location":"extensions/","text":"","title":"Index"},{"location":"extensions/badge/","text":"If you want to display a badge to show that your project is linted and formatted using 'ktlint than you can add the badge: Ktlint code style badge [ ![ktlint ]( https://img.shields.io/badge/ktlint%20code--style-%E2%9D%A4-FF4081 )](https://pinterest.github.io/ktlint/)","title":"Badge"},{"location":"extensions/custom-reporter/","text":"Build a custom reporter \u00b6 Take a look at ktlint-reporter-plain . In short, all you need to do is to implement a Reporter and make it available by registering a custom ReporterProvider using META-INF/services/com.pinterest.ktlint.core.ReporterProvider . Pack all of that into a JAR and you're done. To load a custom (3 rd party) reporter use ktlint --reporter=name,artifact=/path/to/custom-ktlint-reporter.jar (see ktlint --help for more). Third party reporters \u00b6 Known third-party reporters: kryanod/ktlint-junit-reporter reports ktlint output as an xml file in JUnit format so that the ktlint report can be made visible on the Merge Request page. musichin/ktlint-github-reporter uses GitHub workflow commands to set error messages for ktlint issues. tobi2k/ktlint-gitlab-reporter provides output in JSON format that can be parsed by GitLab automatically.","title":"Custom reporter"},{"location":"extensions/custom-reporter/#build-a-custom-reporter","text":"Take a look at ktlint-reporter-plain . In short, all you need to do is to implement a Reporter and make it available by registering a custom ReporterProvider using META-INF/services/com.pinterest.ktlint.core.ReporterProvider . Pack all of that into a JAR and you're done. To load a custom (3 rd party) reporter use ktlint --reporter=name,artifact=/path/to/custom-ktlint-reporter.jar (see ktlint --help for more).","title":"Build a custom reporter"},{"location":"extensions/custom-reporter/#third-party-reporters","text":"Known third-party reporters: kryanod/ktlint-junit-reporter reports ktlint output as an xml file in JUnit format so that the ktlint report can be made visible on the Merge Request page. musichin/ktlint-github-reporter uses GitHub workflow commands to set error messages for ktlint issues. tobi2k/ktlint-gitlab-reporter provides output in JSON format that can be parsed by GitLab automatically.","title":"Third party reporters"},{"location":"extensions/custom-rule-set/","text":"Tip See Writing your first ktlint rule by Niklas Baudy . In a nutshell: a \"rule set\" is a JAR containing one or more Rule s gathered together in a RuleSet . ktlint is relying on the ServiceLoader to discover all available \"RuleSet\"s on the classpath (as a ruleset author, all you need to do is to include a META-INF/services/com.pinterest.ktlint.core.RuleSetProvider file containing a fully qualified name of your RuleSetProvider implementation). ktlint-ruleset-template \u00b6 A complete sample project (with tests and build files) is included in this repo under the ktlint-ruleset-template directory (make sure to check NoVarRuleTest as it contains some useful information). Building the ktlint-ruleset-template $ cd ktlint-ruleset-template/ $ ../gradlew build Provide code sample that violates rule `custom:no-var $ echo 'var v = 0' > test.kt Running the ktlint-ruleset-template $ ktlint -R build/libs/ktlint-ruleset-template.jar --debug --relative test.kt 18 :13:21.026 [ main ] DEBUG com.pinterest.ktlint.internal.RuleSetsLoader - JAR ruleset provided with path \"/../ktlint/ktlint-ruleset-template/build/libs/ktlint-ruleset-template.jar\" 18 :13:21.241 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"baseline\" id. 18 :13:21.241 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"checkstyle\" id. 18 :13:21.241 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"json\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"html\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"plain\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"sarif\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Initializing \"plain\" reporter with { verbose = false, color = false, color_name = DARK_GRAY } [ DEBUG ] Rule with id 'standard:max-line-length' should run after the rule with id 'experimental:trailing-comma' . However, the latter rule is not loaded and is allowed to be ignored. For best results, it is advised load the rule. [ DEBUG ] Rules will be executed in order below ( unless disabled ) : - standard:filename, - standard:final-newline, - standard:chain-wrapping, - standard:colon-spacing, - standard:comma-spacing, - standard:comment-spacing, - standard:curly-spacing, - standard:dot-spacing, - standard:import-ordering, - standard:keyword-spacing, - standard:modifier-order, - standard:no-blank-line-before-rbrace, - standard:no-consecutive-blank-lines, - standard:no-empty-class-body, - standard:no-line-break-after-else, - standard:no-line-break-before-assignment, - standard:no-multi-spaces, - standard:no-semi, - standard:no-trailing-spaces, - standard:no-unit-return, - standard:no-unused-imports, - standard:no-wildcard-imports, - standard:op-spacing, - standard:parameter-list-wrapping, - standard:paren-spacing, - standard:range-spacing, - standard:string-template, - custom:no-var, - standard:indent, - standard:max-line-length ` text test.kt:1:1: Unexpected var, use val instead ( cannot be auto-corrected ) ` 18 :13:21.893 [ main ] DEBUG com.pinterest.ktlint.Main - 872ms / 1 file ( s ) / 1 error ( s ) Tip Multiple custom rule sets can be loaded at the same time. AST \u00b6 While writing/debugging Rule s it's often helpful to have an AST printed out to see the structure rules have to work with. ktlint >= 0.15.0 has a printAST subcommand (or --print-ast flag for ktlint < 0.34.0) specifically for this purpose (usage: ktlint --color printAST <file> ). An example of the output is shown below. $ printf \"fun main() {}\" | ktlint --color printAST --stdin 1 : ~.psi.KtFile ( ~.psi.stubs.elements.KtFileElementType.kotlin.FILE ) 1 : ~.psi.KtPackageDirective ( ~.psi.stubs.elements.KtPlaceHolderStubElementType.PACKAGE_DIRECTIVE ) \"\" 1 : ~.psi.KtImportList ( ~.psi.stubs.elements.KtPlaceHolderStubElementType.IMPORT_LIST ) \"\" 1 : ~.psi.KtScript ( ~.psi.stubs.elements.KtScriptElementType.SCRIPT ) 1 : ~.psi.KtBlockExpression ( ~.KtNodeType.BLOCK ) 1 : ~.psi.KtNamedFunction ( ~.psi.stubs.elements.KtFunctionElementType.FUN ) 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtKeywordToken.fun ) \"fun\" 1 : ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl ( ~.c.i.p.tree.IElementType.WHITE_SPACE ) \" \" 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtToken.IDENTIFIER ) \"main\" 1 : ~.psi.KtParameterList ( ~.psi.stubs.elements.KtPlaceHolderStubElementType.VALUE_PARAMETER_LIST ) 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.LPAR ) \"(\" 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.RPAR ) \")\" 1 : ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl ( ~.c.i.p.tree.IElementType.WHITE_SPACE ) \" \" 1 : ~.psi.KtBlockExpression ( ~.KtNodeType.BLOCK ) 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.LBRACE ) \"{\" 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.RBRACE ) \"}\" format: <line_number:> <node.psi::class> ( <node.elementType> ) \"<node.text>\" legend: ~ = org.jetbrains.kotlin, c.i.p = com.intellij.psi","title":"Custom rule set"},{"location":"extensions/custom-rule-set/#ktlint-ruleset-template","text":"A complete sample project (with tests and build files) is included in this repo under the ktlint-ruleset-template directory (make sure to check NoVarRuleTest as it contains some useful information). Building the ktlint-ruleset-template $ cd ktlint-ruleset-template/ $ ../gradlew build Provide code sample that violates rule `custom:no-var $ echo 'var v = 0' > test.kt Running the ktlint-ruleset-template $ ktlint -R build/libs/ktlint-ruleset-template.jar --debug --relative test.kt 18 :13:21.026 [ main ] DEBUG com.pinterest.ktlint.internal.RuleSetsLoader - JAR ruleset provided with path \"/../ktlint/ktlint-ruleset-template/build/libs/ktlint-ruleset-template.jar\" 18 :13:21.241 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"baseline\" id. 18 :13:21.241 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"checkstyle\" id. 18 :13:21.241 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"json\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"html\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"plain\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"sarif\" id. 18 :13:21.242 [ main ] DEBUG com.pinterest.ktlint.Main - Initializing \"plain\" reporter with { verbose = false, color = false, color_name = DARK_GRAY } [ DEBUG ] Rule with id 'standard:max-line-length' should run after the rule with id 'experimental:trailing-comma' . However, the latter rule is not loaded and is allowed to be ignored. For best results, it is advised load the rule. [ DEBUG ] Rules will be executed in order below ( unless disabled ) : - standard:filename, - standard:final-newline, - standard:chain-wrapping, - standard:colon-spacing, - standard:comma-spacing, - standard:comment-spacing, - standard:curly-spacing, - standard:dot-spacing, - standard:import-ordering, - standard:keyword-spacing, - standard:modifier-order, - standard:no-blank-line-before-rbrace, - standard:no-consecutive-blank-lines, - standard:no-empty-class-body, - standard:no-line-break-after-else, - standard:no-line-break-before-assignment, - standard:no-multi-spaces, - standard:no-semi, - standard:no-trailing-spaces, - standard:no-unit-return, - standard:no-unused-imports, - standard:no-wildcard-imports, - standard:op-spacing, - standard:parameter-list-wrapping, - standard:paren-spacing, - standard:range-spacing, - standard:string-template, - custom:no-var, - standard:indent, - standard:max-line-length ` text test.kt:1:1: Unexpected var, use val instead ( cannot be auto-corrected ) ` 18 :13:21.893 [ main ] DEBUG com.pinterest.ktlint.Main - 872ms / 1 file ( s ) / 1 error ( s ) Tip Multiple custom rule sets can be loaded at the same time.","title":"ktlint-ruleset-template"},{"location":"extensions/custom-rule-set/#ast","text":"While writing/debugging Rule s it's often helpful to have an AST printed out to see the structure rules have to work with. ktlint >= 0.15.0 has a printAST subcommand (or --print-ast flag for ktlint < 0.34.0) specifically for this purpose (usage: ktlint --color printAST <file> ). An example of the output is shown below. $ printf \"fun main() {}\" | ktlint --color printAST --stdin 1 : ~.psi.KtFile ( ~.psi.stubs.elements.KtFileElementType.kotlin.FILE ) 1 : ~.psi.KtPackageDirective ( ~.psi.stubs.elements.KtPlaceHolderStubElementType.PACKAGE_DIRECTIVE ) \"\" 1 : ~.psi.KtImportList ( ~.psi.stubs.elements.KtPlaceHolderStubElementType.IMPORT_LIST ) \"\" 1 : ~.psi.KtScript ( ~.psi.stubs.elements.KtScriptElementType.SCRIPT ) 1 : ~.psi.KtBlockExpression ( ~.KtNodeType.BLOCK ) 1 : ~.psi.KtNamedFunction ( ~.psi.stubs.elements.KtFunctionElementType.FUN ) 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtKeywordToken.fun ) \"fun\" 1 : ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl ( ~.c.i.p.tree.IElementType.WHITE_SPACE ) \" \" 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtToken.IDENTIFIER ) \"main\" 1 : ~.psi.KtParameterList ( ~.psi.stubs.elements.KtPlaceHolderStubElementType.VALUE_PARAMETER_LIST ) 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.LPAR ) \"(\" 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.RPAR ) \")\" 1 : ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl ( ~.c.i.p.tree.IElementType.WHITE_SPACE ) \" \" 1 : ~.psi.KtBlockExpression ( ~.KtNodeType.BLOCK ) 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.LBRACE ) \"{\" 1 : ~.c.i.p.impl.source.tree.LeafPsiElement ( ~.lexer.KtSingleValueToken.RBRACE ) \"}\" format: <line_number:> <node.psi::class> ( <node.elementType> ) \"<node.text>\" legend: ~ = org.jetbrains.kotlin, c.i.p = com.intellij.psi","title":"AST"},{"location":"install/","text":"","title":"Index"},{"location":"install/api/","text":"Note If you don't plan to use ktlint 's API then you can skip this section. TODO: Add to mkdocs.yml once properly documented.","title":"Api"},{"location":"install/cli/","text":"Note If you don't plan to use ktlint 's command line interface then you can skip this section. Download and verification \u00b6 Download manually from github \u00b6 All releases of ktlint can be downloaded from the releases page. Download using curl \u00b6 A particular version of ktlint can be downloaded with next command which also changes the file to an executable in directory /usr/local/bin : Download curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.47.1/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/ Curl not installed or behind proxy If you don't have curl installed - replace curl -sL with wget -qO- . If you are behind a proxy see - curl / wget manpage. Usually simple: http_proxy = http://proxy-server:port https_proxy = http://proxy-server:port curl -sL ... Verification of download \u00b6 ktlint.asc contains PGP signature which you can verify with: Verify releases 0.32.0 and above curl -sS https://keybase.io/ktlint/pgp_keys.asc | gpg --import && gpg --verify ktlint.asc Verify releases up through 0.31.0 curl -sS https://keybase.io/shyiko/pgp_keys.asc | gpg --import && gpg --verify ktlint.asc Package managers \u00b6 ktlint can be installed via several OS specific package managers. Install with brew on macOS or Homebrew on Linux brew install ktlint Install with MacPorts port install ktlint On Arch Linux install package ktlint AUR . Command line usage \u00b6 Rule set(s) \u00b6 When no arguments are specified, the style of all Kotlin files (ending with '.kt' or '.kts') inside the current dir (recursively) are validated with the rules from the standard ruleset . Hidden folders will be skipped. Default validation with standard ruleset ktlint To validate with the standard ruleset and the experimental rulesset run command below: Validation with standard and experimental ruleset ktlint --experimental To validate with a custom ruleset run command below: Validation with standard and a custom ruleset ktlint --ruleset = /path/to/custom-ruleset.jar # or ktlint -R /path/to/custom-ruleset.jar Format (autocorrect) \u00b6 Most style violations can be corrected automatically. Errors that can not be corrected, are printed to stderr . Autocorrect style violations ktlint --format # or ktlint -F Globs \u00b6 Globs can be used to specify more exactly what files and directories are to be validated. ktlint uses the .gitignore pattern style syntax for globs . Globs are processed from left to right. Prepend a glob with ! to negate it. Hidden folders will be skipped. Check only certain locations starting from the current directory # Check all '.kt' files in 'src/' directory, but ignore files ending with 'Test.kt': ktlint \"src/**/*.kt\" \"!src/**/*Test.kt\" # Check all '.kt' files in 'src/' directory, but ignore 'generated' directory and its subdirectories: ktlint \"src/**/*.kt\" \"!src/**/generated/**\" Error reporting \u00b6 ktlint supports different type of reporters. When not specified the plain reporter is used. Optionally the plain reporter can group the violations per file. Style violation grouped by file $ ktlint --reporter = plain?group_by_file Other built-in reporters are: json , sarif , checkstyle , and html Style violations can be written to an output file which is convenient when multiple reporters are specified. In example below, the plain reporter is used to write to the console while the checkstyle reports is written to a file: Multiple reporters ktlint --reporter = plain --reporter = checkstyle,output = ktlint-report-in-checkstyle-format.xml If resolving all existing errors in a project is unwanted, it is possible to create a baseline and in following invocations compare violations against this baseline. Violations that are registered in the baseline, will be ignored silently. Remove the baseline file in case you want to reset it. Check against a baseline file ktlint --baseline = ktlint-baseline.xml # Baseline is created when not existing Rule configuration ( .editorconfig ) \u00b6 Some rules can be tweaked via the editorconfig file . A scaffold of the .editorconfig file can be generated with command below. Note: that the generated file only contains configuration settings which are actively used by the rules which are loaded : Generate .editorconfig ktlint generateEditorConfig # or ktlint --experimental generateEditorConfig # or ktlint --experimental --ruleset = /path/to/custom-ruleset.jar generateEditorConfig Normally this file is located in the root of your project directory. In case the file is located in a sub folder of the project, the settings of that file only applies to that subdirectory and its folders (recursively). Ktlint automatically detects and reads all .editorconfig files in your project. Use command below, to specify a default editorconfig . In case a property is not defined in any .editorconfig file on the path to the file, the value from the default file is used. The path may point to any valid file or directory. The path can be relative or absolute. Depending on your OS, the \"~\" at the beginning of a path is replaced by the user home directory. Override '.editorconfig' ktlint --editorconfig = /path/to/.editorconfig !!! warning \"Overrides '.editorconfig' in project directory\" in KtLint 0.46 and older When specifying this option using ktlint 0.46 or older, all .editorconfig files in the project directory are being ignored. Starting from KtLint 0.47 the properties in this file are used as fallback. Stdin && stdout \u00b6 With command below, the input is read from stdin and the violations are printed to stderr . Lint from stdin ktlint --stdin When combined with the --format option, the formatted code is written to stdout and the violations are printed to stderr : Format from stdin and write to stdout ktlint --stdin -F Tip Output printed to stderr can be suppressed in different ways. To ignore all error output, add 2> /dev/null to the end of the command line. Otherwise, specify a reporter to write the error output to a file. Git hooks \u00b6 Predefined git hooks can be installed, to automatically validate lint errors before commit or push. Install git pre-commit hook ktlint installGitPreCommitHook Install git pre-push hook ktlint installGitPrePushHook Miscellaneous flags and commands \u00b6 -a or --android : Turn on Android Kotlin Style Guide compatibility. This flag is most likely to be removed in a future version. Use .editorconfig ktlint_code_style (https://pinterest.github.io/ktlint/rules/configuration/#code-style). --color and --color-name=<colorName> : Make output colorful and optionally set the color name to use. --disabled_rules=<disabledRules> : A comma-separated list of rules to globally disable. To disable the standard ktlint rule-set use --disabled_rules=standard . This flag is most likely to be removed in a future version. Use .editorconfig disabled_rules (https://pinterest.github.io/ktlint/rules/configuration/#disabled-rules). -h or --help : Prints help information. --limit=<limit> : Maximum number of errors to show (default: show all) printAST or --print-ast : Prints AST (useful when writing/debugging rules) --relative : Print files relative to the working directory (e.g. dir/file.kt instead of /home/user/project/dir/file.kt) -v , --verbose or --debug : Turn on debug output. Also option --trace is available, but this is meant for ktlint library developers. -V or --version : Prints version information and exit. Microsoft Windows users \u00b6 Microsoft Windows On Microsoft Windows you'll have to use java -jar ktlint ... .","title":"Command line"},{"location":"install/cli/#download-and-verification","text":"","title":"Download and verification"},{"location":"install/cli/#download-manually-from-github","text":"All releases of ktlint can be downloaded from the releases page.","title":"Download manually from github"},{"location":"install/cli/#download-using-curl","text":"A particular version of ktlint can be downloaded with next command which also changes the file to an executable in directory /usr/local/bin : Download curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.47.1/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/ Curl not installed or behind proxy If you don't have curl installed - replace curl -sL with wget -qO- . If you are behind a proxy see - curl / wget manpage. Usually simple: http_proxy = http://proxy-server:port https_proxy = http://proxy-server:port curl -sL ...","title":"Download using curl"},{"location":"install/cli/#verification-of-download","text":"ktlint.asc contains PGP signature which you can verify with: Verify releases 0.32.0 and above curl -sS https://keybase.io/ktlint/pgp_keys.asc | gpg --import && gpg --verify ktlint.asc Verify releases up through 0.31.0 curl -sS https://keybase.io/shyiko/pgp_keys.asc | gpg --import && gpg --verify ktlint.asc","title":"Verification of download"},{"location":"install/cli/#package-managers","text":"ktlint can be installed via several OS specific package managers. Install with brew on macOS or Homebrew on Linux brew install ktlint Install with MacPorts port install ktlint On Arch Linux install package ktlint AUR .","title":"Package managers"},{"location":"install/cli/#command-line-usage","text":"","title":"Command line usage"},{"location":"install/cli/#rule-sets","text":"When no arguments are specified, the style of all Kotlin files (ending with '.kt' or '.kts') inside the current dir (recursively) are validated with the rules from the standard ruleset . Hidden folders will be skipped. Default validation with standard ruleset ktlint To validate with the standard ruleset and the experimental rulesset run command below: Validation with standard and experimental ruleset ktlint --experimental To validate with a custom ruleset run command below: Validation with standard and a custom ruleset ktlint --ruleset = /path/to/custom-ruleset.jar # or ktlint -R /path/to/custom-ruleset.jar","title":"Rule set(s)"},{"location":"install/cli/#format-autocorrect","text":"Most style violations can be corrected automatically. Errors that can not be corrected, are printed to stderr . Autocorrect style violations ktlint --format # or ktlint -F","title":"Format (autocorrect)"},{"location":"install/cli/#globs","text":"Globs can be used to specify more exactly what files and directories are to be validated. ktlint uses the .gitignore pattern style syntax for globs . Globs are processed from left to right. Prepend a glob with ! to negate it. Hidden folders will be skipped. Check only certain locations starting from the current directory # Check all '.kt' files in 'src/' directory, but ignore files ending with 'Test.kt': ktlint \"src/**/*.kt\" \"!src/**/*Test.kt\" # Check all '.kt' files in 'src/' directory, but ignore 'generated' directory and its subdirectories: ktlint \"src/**/*.kt\" \"!src/**/generated/**\"","title":"Globs"},{"location":"install/cli/#error-reporting","text":"ktlint supports different type of reporters. When not specified the plain reporter is used. Optionally the plain reporter can group the violations per file. Style violation grouped by file $ ktlint --reporter = plain?group_by_file Other built-in reporters are: json , sarif , checkstyle , and html Style violations can be written to an output file which is convenient when multiple reporters are specified. In example below, the plain reporter is used to write to the console while the checkstyle reports is written to a file: Multiple reporters ktlint --reporter = plain --reporter = checkstyle,output = ktlint-report-in-checkstyle-format.xml If resolving all existing errors in a project is unwanted, it is possible to create a baseline and in following invocations compare violations against this baseline. Violations that are registered in the baseline, will be ignored silently. Remove the baseline file in case you want to reset it. Check against a baseline file ktlint --baseline = ktlint-baseline.xml # Baseline is created when not existing","title":"Error reporting"},{"location":"install/cli/#rule-configuration-editorconfig","text":"Some rules can be tweaked via the editorconfig file . A scaffold of the .editorconfig file can be generated with command below. Note: that the generated file only contains configuration settings which are actively used by the rules which are loaded : Generate .editorconfig ktlint generateEditorConfig # or ktlint --experimental generateEditorConfig # or ktlint --experimental --ruleset = /path/to/custom-ruleset.jar generateEditorConfig Normally this file is located in the root of your project directory. In case the file is located in a sub folder of the project, the settings of that file only applies to that subdirectory and its folders (recursively). Ktlint automatically detects and reads all .editorconfig files in your project. Use command below, to specify a default editorconfig . In case a property is not defined in any .editorconfig file on the path to the file, the value from the default file is used. The path may point to any valid file or directory. The path can be relative or absolute. Depending on your OS, the \"~\" at the beginning of a path is replaced by the user home directory. Override '.editorconfig' ktlint --editorconfig = /path/to/.editorconfig !!! warning \"Overrides '.editorconfig' in project directory\" in KtLint 0.46 and older When specifying this option using ktlint 0.46 or older, all .editorconfig files in the project directory are being ignored. Starting from KtLint 0.47 the properties in this file are used as fallback.","title":"Rule configuration (.editorconfig)"},{"location":"install/cli/#stdin-stdout","text":"With command below, the input is read from stdin and the violations are printed to stderr . Lint from stdin ktlint --stdin When combined with the --format option, the formatted code is written to stdout and the violations are printed to stderr : Format from stdin and write to stdout ktlint --stdin -F Tip Output printed to stderr can be suppressed in different ways. To ignore all error output, add 2> /dev/null to the end of the command line. Otherwise, specify a reporter to write the error output to a file.","title":"Stdin &amp;&amp; stdout"},{"location":"install/cli/#git-hooks","text":"Predefined git hooks can be installed, to automatically validate lint errors before commit or push. Install git pre-commit hook ktlint installGitPreCommitHook Install git pre-push hook ktlint installGitPrePushHook","title":"Git hooks"},{"location":"install/cli/#miscellaneous-flags-and-commands","text":"-a or --android : Turn on Android Kotlin Style Guide compatibility. This flag is most likely to be removed in a future version. Use .editorconfig ktlint_code_style (https://pinterest.github.io/ktlint/rules/configuration/#code-style). --color and --color-name=<colorName> : Make output colorful and optionally set the color name to use. --disabled_rules=<disabledRules> : A comma-separated list of rules to globally disable. To disable the standard ktlint rule-set use --disabled_rules=standard . This flag is most likely to be removed in a future version. Use .editorconfig disabled_rules (https://pinterest.github.io/ktlint/rules/configuration/#disabled-rules). -h or --help : Prints help information. --limit=<limit> : Maximum number of errors to show (default: show all) printAST or --print-ast : Prints AST (useful when writing/debugging rules) --relative : Print files relative to the working directory (e.g. dir/file.kt instead of /home/user/project/dir/file.kt) -v , --verbose or --debug : Turn on debug output. Also option --trace is available, but this is meant for ktlint library developers. -V or --version : Prints version information and exit.","title":"Miscellaneous flags and commands"},{"location":"install/cli/#microsoft-windows-users","text":"Microsoft Windows On Microsoft Windows you'll have to use java -jar ktlint ... .","title":"Microsoft Windows users"},{"location":"install/integrations/","text":"Maven integration \u00b6 By adding the plugin definition below to the <plugins> section in the pom.xml : The ktlint task is bound to the Maven verify lifecycle and will be executed each time the mvn verify is executed. It can also be executed with command mvn antrun:run@ktlint . The ktlint-format task is not bound to any other maven lifecycle. It can be executed with command mvn antrun:run@ktlint-format . See cli usage for arguments that can be supplied to ktlint . Adding plugin to pom.xml ... <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-antrun-plugin </artifactId> <version> 3.1.0 </version> <executions> <execution> <id> ktlint </id> <phase> verify </phase> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"true\" classpathref= \"maven.plugin.classpath\" classname= \"com.pinterest.ktlint.Main\" > <arg value= \"src/**/*.kt\" /> <!-- see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information --> </java> </target> </configuration> <goals> <goal> run </goal> </goals> </execution> <execution> <id> ktlint-format </id> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"true\" classpathref= \"maven.plugin.classpath\" classname= \"com.pinterest.ktlint.Main\" > <arg value= \"-F\" /> <arg value= \"src/**/*.kt\" /> <!-- see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information --> </java> </target> </configuration> <goals> <goal> run </goal> </goals> </execution> </executions> <dependencies> <dependency> <groupId> com.pinterest </groupId> <artifactId> ktlint </artifactId> <version> 0.47.1 </version> </dependency> <!-- additional 3rd party ruleset(s) can be specified here --> </dependencies> </plugin> ... Tip If you want ktlint to run before code compilation takes place - change <phase>verify</phase> to <phase>validate</phase> (see Maven Build Lifecycle for more). ktlint-maven-plugin You might be interested to use the dedicated gantsign/ktlint-maven-plugin . Gradle integration \u00b6 jlleitschuh/ktlint-gradle \u00b6 The jlleitschuh/ktlint-gradle Gradle plugin automatically creates check and format tasks for project Kotlin sources. It supports different kotlin plugins and Gradle build caching. jeremymailen/kotlinter-gradle \u00b6 The jeremymailen/kotlinter-gradle Gradle plugin features incremental build support, file reports, and *.kts source support. diffplug/spotless \u00b6 The diffplug/spotless Gradle plugin is a general-purpose formatting plugin which amongst many others also supports ktlint . autostyle/autostyle \u00b6 The autostyle/autostyle Gradle plugin is a general-purpose formatting plugin which amongst others also supports ktlint . Custom Gradle integration \u00b6 Custom Gradle integration with Groovy \u00b6 Warning It is recommended to use one of the Gradle plugins mentioned before. The configuration below, defines following task: The ktlint is bound to the Gradle check task. It can also be executed with command gradle ktlint . The ktlint-format task is not bound to any other task. It can be executed with command gradle ktlintFormat . build.gradle // kotlin-gradle-plugin must be applied for configuration below to work // (see https://kotlinlang.org/docs/reference/using-gradle.html) apply plugin: 'java' repositories { mavenCentral () } configurations { ktlint } dependencies { ktlint ( \"com.pinterest:ktlint:0.47.1\" ) { attributes { attribute ( Bundling . BUNDLING_ATTRIBUTE , getObjects (). named ( Bundling , Bundling . EXTERNAL )) } } // additional 3rd party ruleset(s) can be specified here // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and // ktlint will pick them up } task ktlint ( type: JavaExec , group: \"verification\" ) { description = \"Check Kotlin code style.\" classpath = configurations . ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) args \"src/**/*.kt\" // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information } check . dependsOn ktlint task ktlintFormat ( type: JavaExec , group: \"formatting\" ) { description = \"Fix Kotlin code style deviations.\" classpath = configurations . ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) args \"-F\" , \"src/**/*.kt\" // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information } See Making your Gradle tasks incremental by Niklas Baudy on how to make tasks above incremental. Custom Gradle integration with Kotlin DSL \u00b6 Warning It is recommended to use one of the Gradle plugins mentioned before. The configuration below, defines following task: The ktlint is bound to the Gradle check task. It can also be executed with command gradle ktlint . The ktlint-format task is not bound to any other task. It can be executed with command gradle ktlintFormat . build.gradle.kts val ktlint by configurations . creating dependencies { ktlint ( \"com.pinterest:ktlint:0.47.1\" ) { attributes { attribute ( Bundling . BUNDLING_ATTRIBUTE , objects . named ( Bundling . EXTERNAL )) } } // ktlint(project(\":custom-ktlint-ruleset\")) // in case of custom ruleset } val outputDir = \" ${ project . buildDir } /reports/ktlint/\" val inputFiles = project . fileTree ( mapOf ( \"dir\" to \"src\" , \"include\" to \"**/*.kt\" )) val ktlintCheck by tasks . creating ( JavaExec :: class ) { inputs . files ( inputFiles ) outputs . dir ( outputDir ) description = \"Check Kotlin code style.\" classpath = ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information args = listOf ( \"src/**/*.kt\" ) } val ktlintFormat by tasks . creating ( JavaExec :: class ) { inputs . files ( inputFiles ) outputs . dir ( outputDir ) description = \"Fix Kotlin code style deviations.\" classpath = ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information args = listOf ( \"-F\" , \"src/**/*.kt\" ) } GNU Emacs integration \u00b6 See whirm/flycheck-kotlin . Vim integration \u00b6 See w0rp/ale . Mega-Linter integration \u00b6 The Mega-Linter integrates 70+ linters in a single tool for CI, including ktlint activated out of the box Other integration \u00b6 Do you know any other integration with ktlint then please create a PR to add this integration to our documentation.","title":"Integrations"},{"location":"install/integrations/#maven-integration","text":"By adding the plugin definition below to the <plugins> section in the pom.xml : The ktlint task is bound to the Maven verify lifecycle and will be executed each time the mvn verify is executed. It can also be executed with command mvn antrun:run@ktlint . The ktlint-format task is not bound to any other maven lifecycle. It can be executed with command mvn antrun:run@ktlint-format . See cli usage for arguments that can be supplied to ktlint . Adding plugin to pom.xml ... <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-antrun-plugin </artifactId> <version> 3.1.0 </version> <executions> <execution> <id> ktlint </id> <phase> verify </phase> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"true\" classpathref= \"maven.plugin.classpath\" classname= \"com.pinterest.ktlint.Main\" > <arg value= \"src/**/*.kt\" /> <!-- see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information --> </java> </target> </configuration> <goals> <goal> run </goal> </goals> </execution> <execution> <id> ktlint-format </id> <configuration> <target name= \"ktlint\" > <java taskname= \"ktlint\" dir= \"${basedir}\" fork= \"true\" failonerror= \"true\" classpathref= \"maven.plugin.classpath\" classname= \"com.pinterest.ktlint.Main\" > <arg value= \"-F\" /> <arg value= \"src/**/*.kt\" /> <!-- see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information --> </java> </target> </configuration> <goals> <goal> run </goal> </goals> </execution> </executions> <dependencies> <dependency> <groupId> com.pinterest </groupId> <artifactId> ktlint </artifactId> <version> 0.47.1 </version> </dependency> <!-- additional 3rd party ruleset(s) can be specified here --> </dependencies> </plugin> ... Tip If you want ktlint to run before code compilation takes place - change <phase>verify</phase> to <phase>validate</phase> (see Maven Build Lifecycle for more). ktlint-maven-plugin You might be interested to use the dedicated gantsign/ktlint-maven-plugin .","title":"Maven integration"},{"location":"install/integrations/#gradle-integration","text":"","title":"Gradle integration"},{"location":"install/integrations/#jlleitschuhktlint-gradle","text":"The jlleitschuh/ktlint-gradle Gradle plugin automatically creates check and format tasks for project Kotlin sources. It supports different kotlin plugins and Gradle build caching.","title":"jlleitschuh/ktlint-gradle"},{"location":"install/integrations/#jeremymailenkotlinter-gradle","text":"The jeremymailen/kotlinter-gradle Gradle plugin features incremental build support, file reports, and *.kts source support.","title":"jeremymailen/kotlinter-gradle"},{"location":"install/integrations/#diffplugspotless","text":"The diffplug/spotless Gradle plugin is a general-purpose formatting plugin which amongst many others also supports ktlint .","title":"diffplug/spotless"},{"location":"install/integrations/#autostyleautostyle","text":"The autostyle/autostyle Gradle plugin is a general-purpose formatting plugin which amongst others also supports ktlint .","title":"autostyle/autostyle"},{"location":"install/integrations/#custom-gradle-integration","text":"","title":"Custom Gradle integration"},{"location":"install/integrations/#custom-gradle-integration-with-groovy","text":"Warning It is recommended to use one of the Gradle plugins mentioned before. The configuration below, defines following task: The ktlint is bound to the Gradle check task. It can also be executed with command gradle ktlint . The ktlint-format task is not bound to any other task. It can be executed with command gradle ktlintFormat . build.gradle // kotlin-gradle-plugin must be applied for configuration below to work // (see https://kotlinlang.org/docs/reference/using-gradle.html) apply plugin: 'java' repositories { mavenCentral () } configurations { ktlint } dependencies { ktlint ( \"com.pinterest:ktlint:0.47.1\" ) { attributes { attribute ( Bundling . BUNDLING_ATTRIBUTE , getObjects (). named ( Bundling , Bundling . EXTERNAL )) } } // additional 3rd party ruleset(s) can be specified here // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and // ktlint will pick them up } task ktlint ( type: JavaExec , group: \"verification\" ) { description = \"Check Kotlin code style.\" classpath = configurations . ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) args \"src/**/*.kt\" // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information } check . dependsOn ktlint task ktlintFormat ( type: JavaExec , group: \"formatting\" ) { description = \"Fix Kotlin code style deviations.\" classpath = configurations . ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) args \"-F\" , \"src/**/*.kt\" // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information } See Making your Gradle tasks incremental by Niklas Baudy on how to make tasks above incremental.","title":"Custom Gradle integration with Groovy"},{"location":"install/integrations/#custom-gradle-integration-with-kotlin-dsl","text":"Warning It is recommended to use one of the Gradle plugins mentioned before. The configuration below, defines following task: The ktlint is bound to the Gradle check task. It can also be executed with command gradle ktlint . The ktlint-format task is not bound to any other task. It can be executed with command gradle ktlintFormat . build.gradle.kts val ktlint by configurations . creating dependencies { ktlint ( \"com.pinterest:ktlint:0.47.1\" ) { attributes { attribute ( Bundling . BUNDLING_ATTRIBUTE , objects . named ( Bundling . EXTERNAL )) } } // ktlint(project(\":custom-ktlint-ruleset\")) // in case of custom ruleset } val outputDir = \" ${ project . buildDir } /reports/ktlint/\" val inputFiles = project . fileTree ( mapOf ( \"dir\" to \"src\" , \"include\" to \"**/*.kt\" )) val ktlintCheck by tasks . creating ( JavaExec :: class ) { inputs . files ( inputFiles ) outputs . dir ( outputDir ) description = \"Check Kotlin code style.\" classpath = ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information args = listOf ( \"src/**/*.kt\" ) } val ktlintFormat by tasks . creating ( JavaExec :: class ) { inputs . files ( inputFiles ) outputs . dir ( outputDir ) description = \"Fix Kotlin code style deviations.\" classpath = ktlint mainClass . set ( \"com.pinterest.ktlint.Main\" ) // see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information args = listOf ( \"-F\" , \"src/**/*.kt\" ) }","title":"Custom Gradle integration with Kotlin DSL"},{"location":"install/integrations/#gnu-emacs-integration","text":"See whirm/flycheck-kotlin .","title":"GNU Emacs integration"},{"location":"install/integrations/#vim-integration","text":"See w0rp/ale .","title":"Vim integration"},{"location":"install/integrations/#mega-linter-integration","text":"The Mega-Linter integrates 70+ linters in a single tool for CI, including ktlint activated out of the box","title":"Mega-Linter integration"},{"location":"install/integrations/#other-integration","text":"Do you know any other integration with ktlint then please create a PR to add this integration to our documentation.","title":"Other integration"},{"location":"install/overview/","text":"See command line interface or integrations for details on installing the latest release of ktlint . Online demo \u00b6 See ktlint online if you want to try-out 'ktlint'. This online version compares rule sets provided by ktlint and diktat (a layer on top of ktlint ). To contribute to or get more info about ktlint online, please visit the GitHub repository .","title":"Overview"},{"location":"install/overview/#online-demo","text":"See ktlint online if you want to try-out 'ktlint'. This online version compares rule sets provided by ktlint and diktat (a layer on top of ktlint ). To contribute to or get more info about ktlint online, please visit the GitHub repository .","title":"Online demo"},{"location":"install/snapshot-build/","text":"Access to the latest master snapshot \u00b6 Whenever a commit is added to the master branch a snapshot build is automatically uploaded to Sonatype's snapshots repository . If you are eager to try upcoming changes (that might or might not be included in the next stable release) you can do so by changing version of ktlint to <latest-version>-SNAPSHOT + adding a repo: Maven \u00b6 ... <repository> <id> sonatype-snapshots </id> <url> https://oss.sonatype.org/content/repositories/snapshots </url> <snapshots> <enabled> true </enabled> </snapshots> <releases> <enabled> false </enabled> </releases> </repository> ... Gradle \u00b6 repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } } Kotlin development version snapshot \u00b6 Additionally, project publishes snapshots build against latest kotlin development version. To use them, change version of ktlint to <latest-version>-kotlin-dev-SNAPSHOT .","title":"Snapshot build"},{"location":"install/snapshot-build/#access-to-the-latest-master-snapshot","text":"Whenever a commit is added to the master branch a snapshot build is automatically uploaded to Sonatype's snapshots repository . If you are eager to try upcoming changes (that might or might not be included in the next stable release) you can do so by changing version of ktlint to <latest-version>-SNAPSHOT + adding a repo:","title":"Access to the latest master snapshot"},{"location":"install/snapshot-build/#maven","text":"... <repository> <id> sonatype-snapshots </id> <url> https://oss.sonatype.org/content/repositories/snapshots </url> <snapshots> <enabled> true </enabled> </snapshots> <releases> <enabled> false </enabled> </releases> </repository> ...","title":"Maven"},{"location":"install/snapshot-build/#gradle","text":"repositories { maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } }","title":"Gradle"},{"location":"install/snapshot-build/#kotlin-development-version-snapshot","text":"Additionally, project publishes snapshots build against latest kotlin development version. To use them, change version of ktlint to <latest-version>-kotlin-dev-SNAPSHOT .","title":"Kotlin development version snapshot"},{"location":"rules/","text":"= Rules","title":"Index"},{"location":"rules/configuration-intellij-idea/","text":"Warning ktlint strives to prevent code formatting conflicts with IntelliJ IDEA / Android Studio. We recommend using either IDE formatting or ktlint formatting. However, if you persist on using both, then please ensure that the formatting settings are aligned as described below. This reduces the chance that code which is formatted by ktlint conflicts with formatting by the IntelliJ IDEA built-in formatter. Note IntelliJ IDEA supports the kotlin coding conventions . As of version 0.47.x of ktlint, the support to overwrite some configuration files of IntelliJ IDEA has been dropped as it no longer fits the scope of the project. Steps: Go to your project directory Create or replace file .idea/codeStyles/codeStyleConfig.xml with content below: <component name= \"ProjectCodeStyleConfiguration\" > <state> <option name= \"USE_PER_PROJECT_SETTINGS\" value= \"true\" /> </state> </component> Create or replace file .idea/codeStyles/Project.xml with content below: <component name= \"ProjectCodeStyleConfiguration\" > <code_scheme name= \"Project\" version= \"173\" > <JetCodeStyleSettings> <option name= \"PACKAGES_TO_USE_STAR_IMPORTS\" > <value /> </option> <option name= \"NAME_COUNT_TO_USE_STAR_IMPORT\" value= \"2147483647\" /> <option name= \"NAME_COUNT_TO_USE_STAR_IMPORT_FOR_MEMBERS\" value= \"2147483647\" /> <option name= \"CODE_STYLE_DEFAULTS\" value= \"KOTLIN_OFFICIAL\" /> </JetCodeStyleSettings> <codeStyleSettings language= \"kotlin\" > <option name= \"CODE_STYLE_DEFAULTS\" value= \"KOTLIN_OFFICIAL\" /> </codeStyleSettings> </code_scheme> </component>","title":"IntelliJ IDEA configuration"},{"location":"rules/configuration-ktlint/","text":"Ktlint uses a limited set of .editorconfig properties for additional configuration. A sensible default value is provided for each property when not explicitly defined. Properties can be overridden, provided they are specified under [*.{kt,kts}] . Ktlint uses some properties defined by .editorconfig , IntelliJ IDEA and custom properties. Danger Unfortunately IntelliJ IDEA has an autoformat issue regarding .editorconfig . Due to this error an additional space is added between glob statements, resulting in [*{kt, kts}] instead of [*{kt,kts}] . The .editorconfig library used by ktlint ignores sections after encountering a space in the list . As a result, the rule is not applied on all files as documented in the original ktlint issue . Code style \u00b6 By default, the offical Kotlin code style is applied. Alternatively, the code style can be set to android . [*.{kt,kts}] ktlint_code_style = official Disabled rules \u00b6 By default, no rules are disabled. The property disabled_rules holds a comma separated list (without spaces). Rules which are not defined in the standard ruleset have to be prefixed. Rules defined in the standard ruleset may optionally be prefixed. Example: [*.{kt,kts}] disabled_rules = some-standard-rule,experimental:some-experimental-rule,my-custom-ruleset:my-custom-rule Final newline \u00b6 By default, a final newline is required at the end of the file. [*.{kt,kts}] insert_final_newline = true This setting only takes effect when rule final-newline is enabled. Force multiline function signature based on number of parameters \u00b6 By default, the number of parameters in a function signature is not relevant when rewriting the function signature. Only the maximum line length determines when a function signature should be written on a single line or with multiple lines. Setting ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than can be used, to force a multiline function signature in case the function contain at least a number of parameters even in case the function signature would fit on a single line. Use value -1 (default) to disable this setting. [*.{kt,kts}] ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than = -1 This setting only takes effect when rule experimental:function-signature is enabled. Wrapping the expression body of a function \u00b6 Setting ktlint_function_signature_body_expression_wrapping determines if and when the expression body of a function is wrapped to a new line. This setting can be set to value default , multiline or always . When set to default , the first line of a body expression is appended to the function signature as long as the max line length is not exceeded. ktlint_function_signature_body_expression_wrapping=default (or when not set) // Given that the function signature has to be written as a single line function signature fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () // Given that the function signature has to be written as a multiline function signature fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () When set to multiline , the body expression starts on a separate line in case it is a multiline expression. A single line body expression is wrapped only when it does not fit on the same line as the function signature. ktlint_function_signature_body_expression_wrapping=multiline // Given a single line body expression and // a the function signature that has to be written as a single line function signature and // it does not exceed the max line length fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () // Given a single line body expression and // a the function signature that has to be written as a multiline function signature and // it does not exceed the max line length fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () // Given a single line body expression then always wrap it to a separate line fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () When set to always the body expression is always wrapped to a separate line. ktlint_function_signature_body_expression_wrapping=always fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () fun functionWithAVeryLongName ( a : Any , b : Any ): String = \"some-result\" . uppercase () This setting only takes effect when rule experimental:function-signature is enabled. Ignore identifiers enclosed in backticks \u00b6 By default, the identifiers enclosed in backticks are not ignored. According to Kotlin coding conventions it is acceptable to write method names in natural language. When using natural language, the description tends to be longer. This property allows lines containing an identifier between backticks to be longer than the maximum line length. (Since 0.41.0) @Test fun `Given a test with a very loooooooooooooooooooooong test description` () { } [*.{kt,kts}] ktlint_ignore_back_ticked_identifier = false This setting only takes effect when rule max-line-length is enabled. Import layouts \u00b6 By default, the same imports are allowed as in IntelliJ IDEA. The import path can be a full path, e.g. \"java.util.List. \" as well as wildcard path, e.g. \"kotlin. *\". The layout can be composed by the following symbols: * - wildcard. There must be at least one entry of a single wildcard to match all other imports. Matches anything after a specified symbol/import as well. | - blank line. Supports only single blank lines between imports. No blank line is allowed in the beginning or end of the layout. ^ - alias import, e.g. \"^android.*\" will match all android alias imports, \"^\" will match all other alias imports. Examples: ij_kotlin_imports_layout =* # alphabetical with capital letters before lower case letters ( e . g . Z before a ), no blank lines ij_kotlin_imports_layout =* , java . ** , javax . ** , kotlin . ** , ^ # default IntelliJ IDEA style , same as alphabetical , but with \"java\" , \"javax\" , \"kotlin\" and alias imports in the end of the imports list ij_kotlin_imports_layout = android . ** , | , ^ org . junit . ** , kotlin . io . Closeable . * , | , * , ^ # custom imports layout Wildcard imports can be allowed for specific import paths (Comma-separated list, use \"**\" as wildcard for package and all subpackages). This setting overrides the no-wildcard-imports rule. This setting is best be used for allowing wildcard imports from libraries like Ktor where extension functions are used in a way that creates a lot of imports. [*.{kt,kts}] ij_kotlin_packages_to_use_import_on_demand = java.util.*,kotlinx.android.synthetic.** This setting only takes effect when rule no-wildcard-imports is enabled. Indent size & style \u00b6 By default, indenting is done with 4 spaces per indent level in official Kotlin code style while a single tab is used by default in the android code style. [*.{kt,kts}] indent_size = 4 # possible values: number (e.g. 2), \"unset\" (makes ktlint ignore indentation completely) indent_style = space # or \"tab\" Those settings are used by multiple rules of which rule indent is the most important. Max line length \u00b6 By default, the maximum line length is not set. The android code style sets the max line length to 100 (per Android Kotlin Style Guide). [*.{kt,kts}] max_line_length = -1 # Use \"off\" (or -1) to ignore max line length or a positive number to set max line length This setting is used by multiple rules of which rule max-line-length is the most important. Trailing comma on call site \u00b6 By default, trailing comma's on call site are not allowed. When enabling the property, the trailing comma becomes mandatory where applicable. Example: [*.{kt,kts}] ij_kotlin_allow_trailing_comma_on_call_site = false This setting only takes effect when rule trailing-comma-on-call-site is enabled. Trailing comma on declaration site \u00b6 By default, trailing comma's on declaration site are not allowed. When enabling the property, the trailing comma becomes mandatory where applicable. Example: [*.{kt,kts}] ij_kotlin_allow_trailing_comma = false # Only used for declaration site This setting only takes effect when rule trailing-comma-on-declaration-site is enabled. Overriding Editorconfig properties for specific directories \u00b6 You can override properties for specific directories inside your project: [*.{kt,kts}] disabled_rules = import-ordering Note that in this case 'import-ordering' rule will be active and 'indent' will be disabled [api/*.{kt,kts}] disabled_rules = indent","title":"KtLint configuration"},{"location":"rules/configuration-ktlint/#code-style","text":"By default, the offical Kotlin code style is applied. Alternatively, the code style can be set to android . [*.{kt,kts}] ktlint_code_style = official","title":"Code style"},{"location":"rules/configuration-ktlint/#disabled-rules","text":"By default, no rules are disabled. The property disabled_rules holds a comma separated list (without spaces). Rules which are not defined in the standard ruleset have to be prefixed. Rules defined in the standard ruleset may optionally be prefixed. Example: [*.{kt,kts}] disabled_rules = some-standard-rule,experimental:some-experimental-rule,my-custom-ruleset:my-custom-rule","title":"Disabled rules"},{"location":"rules/configuration-ktlint/#final-newline","text":"By default, a final newline is required at the end of the file. [*.{kt,kts}] insert_final_newline = true This setting only takes effect when rule final-newline is enabled.","title":"Final newline"},{"location":"rules/configuration-ktlint/#force-multiline-function-signature-based-on-number-of-parameters","text":"By default, the number of parameters in a function signature is not relevant when rewriting the function signature. Only the maximum line length determines when a function signature should be written on a single line or with multiple lines. Setting ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than can be used, to force a multiline function signature in case the function contain at least a number of parameters even in case the function signature would fit on a single line. Use value -1 (default) to disable this setting. [*.{kt,kts}] ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than = -1 This setting only takes effect when rule experimental:function-signature is enabled.","title":"Force multiline function signature based on number of parameters"},{"location":"rules/configuration-ktlint/#wrapping-the-expression-body-of-a-function","text":"Setting ktlint_function_signature_body_expression_wrapping determines if and when the expression body of a function is wrapped to a new line. This setting can be set to value default , multiline or always . When set to default , the first line of a body expression is appended to the function signature as long as the max line length is not exceeded. ktlint_function_signature_body_expression_wrapping=default (or when not set) // Given that the function signature has to be written as a single line function signature fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () // Given that the function signature has to be written as a multiline function signature fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () When set to multiline , the body expression starts on a separate line in case it is a multiline expression. A single line body expression is wrapped only when it does not fit on the same line as the function signature. ktlint_function_signature_body_expression_wrapping=multiline // Given a single line body expression and // a the function signature that has to be written as a single line function signature and // it does not exceed the max line length fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () // Given a single line body expression and // a the function signature that has to be written as a multiline function signature and // it does not exceed the max line length fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () // Given a single line body expression then always wrap it to a separate line fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () When set to always the body expression is always wrapped to a separate line. ktlint_function_signature_body_expression_wrapping=always fun someFunction ( a : Any , b : Any ): String = \"some-result\" . uppercase () fun functionWithAVeryLongName ( a : Any , b : Any ): String = \"some-result\" . uppercase () This setting only takes effect when rule experimental:function-signature is enabled.","title":"Wrapping the expression body of a function"},{"location":"rules/configuration-ktlint/#ignore-identifiers-enclosed-in-backticks","text":"By default, the identifiers enclosed in backticks are not ignored. According to Kotlin coding conventions it is acceptable to write method names in natural language. When using natural language, the description tends to be longer. This property allows lines containing an identifier between backticks to be longer than the maximum line length. (Since 0.41.0) @Test fun `Given a test with a very loooooooooooooooooooooong test description` () { } [*.{kt,kts}] ktlint_ignore_back_ticked_identifier = false This setting only takes effect when rule max-line-length is enabled.","title":"Ignore identifiers enclosed in backticks"},{"location":"rules/configuration-ktlint/#import-layouts","text":"By default, the same imports are allowed as in IntelliJ IDEA. The import path can be a full path, e.g. \"java.util.List. \" as well as wildcard path, e.g. \"kotlin. *\". The layout can be composed by the following symbols: * - wildcard. There must be at least one entry of a single wildcard to match all other imports. Matches anything after a specified symbol/import as well. | - blank line. Supports only single blank lines between imports. No blank line is allowed in the beginning or end of the layout. ^ - alias import, e.g. \"^android.*\" will match all android alias imports, \"^\" will match all other alias imports. Examples: ij_kotlin_imports_layout =* # alphabetical with capital letters before lower case letters ( e . g . Z before a ), no blank lines ij_kotlin_imports_layout =* , java . ** , javax . ** , kotlin . ** , ^ # default IntelliJ IDEA style , same as alphabetical , but with \"java\" , \"javax\" , \"kotlin\" and alias imports in the end of the imports list ij_kotlin_imports_layout = android . ** , | , ^ org . junit . ** , kotlin . io . Closeable . * , | , * , ^ # custom imports layout Wildcard imports can be allowed for specific import paths (Comma-separated list, use \"**\" as wildcard for package and all subpackages). This setting overrides the no-wildcard-imports rule. This setting is best be used for allowing wildcard imports from libraries like Ktor where extension functions are used in a way that creates a lot of imports. [*.{kt,kts}] ij_kotlin_packages_to_use_import_on_demand = java.util.*,kotlinx.android.synthetic.** This setting only takes effect when rule no-wildcard-imports is enabled.","title":"Import layouts"},{"location":"rules/configuration-ktlint/#indent-size-style","text":"By default, indenting is done with 4 spaces per indent level in official Kotlin code style while a single tab is used by default in the android code style. [*.{kt,kts}] indent_size = 4 # possible values: number (e.g. 2), \"unset\" (makes ktlint ignore indentation completely) indent_style = space # or \"tab\" Those settings are used by multiple rules of which rule indent is the most important.","title":"Indent size &amp; style"},{"location":"rules/configuration-ktlint/#max-line-length","text":"By default, the maximum line length is not set. The android code style sets the max line length to 100 (per Android Kotlin Style Guide). [*.{kt,kts}] max_line_length = -1 # Use \"off\" (or -1) to ignore max line length or a positive number to set max line length This setting is used by multiple rules of which rule max-line-length is the most important.","title":"Max line length"},{"location":"rules/configuration-ktlint/#trailing-comma-on-call-site","text":"By default, trailing comma's on call site are not allowed. When enabling the property, the trailing comma becomes mandatory where applicable. Example: [*.{kt,kts}] ij_kotlin_allow_trailing_comma_on_call_site = false This setting only takes effect when rule trailing-comma-on-call-site is enabled.","title":"Trailing comma on call site"},{"location":"rules/configuration-ktlint/#trailing-comma-on-declaration-site","text":"By default, trailing comma's on declaration site are not allowed. When enabling the property, the trailing comma becomes mandatory where applicable. Example: [*.{kt,kts}] ij_kotlin_allow_trailing_comma = false # Only used for declaration site This setting only takes effect when rule trailing-comma-on-declaration-site is enabled.","title":"Trailing comma on declaration site"},{"location":"rules/configuration-ktlint/#overriding-editorconfig-properties-for-specific-directories","text":"You can override properties for specific directories inside your project: [*.{kt,kts}] disabled_rules = import-ordering Note that in this case 'import-ordering' rule will be active and 'indent' will be disabled [api/*.{kt,kts}] disabled_rules = indent","title":"Overriding Editorconfig properties for specific directories"},{"location":"rules/experimental/","text":"New rules will be added into the experimental ruleset , which can be enabled by passing the --experimental flag to ktlint . Block comment initial star alignment \u00b6 Lines in a block comment which (exclusive the indentation) start with a * should have this * aligned with the * in the opening of the block comment. Rule id: experimental:block-comment-initial-star-alignment Discouraged comment location \u00b6 Detect discouraged comment locations (no autocorrect). Rule id: experimental:discouraged-comment-location Unnecessary parenthesis before trailing lambda \u00b6 An empty parentheses block before a lambda is redundant. Ktlint Disallowed some - string \".count { it == '-' } some - string \".count() { it == '-' } Rule id: experimental:unnecessary-parentheses-before-trailing-lambda Function signature \u00b6 Rewrites the function signature to a single line when possible (e.g. when not exceeding the max_line_length property) or a multiline signature otherwise. In case of function with a body expression, the body expression is placed on the same line as the function signature when not exceeding the max_line_length property. Optionally the function signature can be forced to be written as a multiline signature in case the function has more than a specified number of parameters ( .editorconfig' property ktlint_function_signature_wrapping_rule_always_with_minimum_parameters`) Rule id: function-signature Spacing \u00b6 Fun keyword spacing \u00b6 Consistent spacing after the fun keyword. Rule id: experimental:fun-keyword-spacing Function return type spacing \u00b6 Consistent spacing around the function return type. Rule id: experimental:function-return-type-spacing Function start of body spacing \u00b6 Consistent spacing before start of function body. Rule id: experimental:function-start-of-body-spacing : Function type reference spacing \u00b6 Consistent spacing in the type reference before a function. Rule id: experimental:function-type-reference-spacing Modifier list spacing \u00b6 Consistent spacing between modifiers in and after the last modifier in a modifier list. Rule id: experimental:modifier-list-spacing Nullable type spacing \u00b6 No spaces in a nullable type. Rule id: experimental:nullable-type-spacing Parameter list spacing \u00b6 Consistent spacing inside the parameter list. Rule id: experimental:parameter-list-spacing Spacing between function name and opening parenthesis \u00b6 Consistent spacing between function name and opening parenthesis. Rule id: experimental:spacing-between-function-name-and-opening-parenthesis Type argument list spacing \u00b6 Spacing before and after the angle brackets of a type argument list. Rule id: experimental:type-argument-list-spacing Type parameter list spacing \u00b6 Spacing after a type parameter list in function and class declarations. Rule id: experimental:type-parameter-list-spacing Wrapping \u00b6 Comment wrapping \u00b6 A block comment should start and end on a line that does not contain any other element. A block comment should not be used as end of line comment. Rule id: experimental:comment-wrapping Kdoc wrapping \u00b6 A KDoc comment should start and end on a line that does not contain any other element. Rule id: experimental:kdoc-wrapping","title":"Experimental rules"},{"location":"rules/experimental/#block-comment-initial-star-alignment","text":"Lines in a block comment which (exclusive the indentation) start with a * should have this * aligned with the * in the opening of the block comment. Rule id: experimental:block-comment-initial-star-alignment","title":"Block comment initial star alignment"},{"location":"rules/experimental/#discouraged-comment-location","text":"Detect discouraged comment locations (no autocorrect). Rule id: experimental:discouraged-comment-location","title":"Discouraged comment location"},{"location":"rules/experimental/#unnecessary-parenthesis-before-trailing-lambda","text":"An empty parentheses block before a lambda is redundant. Ktlint Disallowed some - string \".count { it == '-' } some - string \".count() { it == '-' } Rule id: experimental:unnecessary-parentheses-before-trailing-lambda","title":"Unnecessary parenthesis before trailing lambda"},{"location":"rules/experimental/#function-signature","text":"Rewrites the function signature to a single line when possible (e.g. when not exceeding the max_line_length property) or a multiline signature otherwise. In case of function with a body expression, the body expression is placed on the same line as the function signature when not exceeding the max_line_length property. Optionally the function signature can be forced to be written as a multiline signature in case the function has more than a specified number of parameters ( .editorconfig' property ktlint_function_signature_wrapping_rule_always_with_minimum_parameters`) Rule id: function-signature","title":"Function signature"},{"location":"rules/experimental/#spacing","text":"","title":"Spacing"},{"location":"rules/experimental/#fun-keyword-spacing","text":"Consistent spacing after the fun keyword. Rule id: experimental:fun-keyword-spacing","title":"Fun keyword spacing"},{"location":"rules/experimental/#function-return-type-spacing","text":"Consistent spacing around the function return type. Rule id: experimental:function-return-type-spacing","title":"Function return type spacing"},{"location":"rules/experimental/#function-start-of-body-spacing","text":"Consistent spacing before start of function body. Rule id: experimental:function-start-of-body-spacing :","title":"Function start of body spacing"},{"location":"rules/experimental/#function-type-reference-spacing","text":"Consistent spacing in the type reference before a function. Rule id: experimental:function-type-reference-spacing","title":"Function type reference spacing"},{"location":"rules/experimental/#modifier-list-spacing","text":"Consistent spacing between modifiers in and after the last modifier in a modifier list. Rule id: experimental:modifier-list-spacing","title":"Modifier list spacing"},{"location":"rules/experimental/#nullable-type-spacing","text":"No spaces in a nullable type. Rule id: experimental:nullable-type-spacing","title":"Nullable type spacing"},{"location":"rules/experimental/#parameter-list-spacing","text":"Consistent spacing inside the parameter list. Rule id: experimental:parameter-list-spacing","title":"Parameter list spacing"},{"location":"rules/experimental/#spacing-between-function-name-and-opening-parenthesis","text":"Consistent spacing between function name and opening parenthesis. Rule id: experimental:spacing-between-function-name-and-opening-parenthesis","title":"Spacing between function name and opening parenthesis"},{"location":"rules/experimental/#type-argument-list-spacing","text":"Spacing before and after the angle brackets of a type argument list. Rule id: experimental:type-argument-list-spacing","title":"Type argument list spacing"},{"location":"rules/experimental/#type-parameter-list-spacing","text":"Spacing after a type parameter list in function and class declarations. Rule id: experimental:type-parameter-list-spacing","title":"Type parameter list spacing"},{"location":"rules/experimental/#wrapping","text":"","title":"Wrapping"},{"location":"rules/experimental/#comment-wrapping","text":"A block comment should start and end on a line that does not contain any other element. A block comment should not be used as end of line comment. Rule id: experimental:comment-wrapping","title":"Comment wrapping"},{"location":"rules/experimental/#kdoc-wrapping","text":"A KDoc comment should start and end on a line that does not contain any other element. Rule id: experimental:kdoc-wrapping","title":"Kdoc wrapping"},{"location":"rules/standard/","text":"Annotation formatting \u00b6 Multiple annotations should be on a separate line than the annotated declaration; annotations with parameters should each be on separate lines; annotations should be followed by a space Rule-id: annotation Argument list wrapping \u00b6 Rule-id: argument-list-wrapping Chain wrapping \u00b6 When wrapping chained calls . , ?. and ?: should be placed on the next line Rule id: chain-wrapping Enum entry \u00b6 Enum entry names should be uppercase underscore-separated names. Rule id: enum-entry-name-case File name \u00b6 Files containing only one toplevel domain should be named according to that element. Rule id: filename Final newline \u00b6 Ensures consistent usage of a newline at the end of each file. This rule can be configured with .editorconfig property insert_final_newline . Rule id: final-newline Import ordering \u00b6 Imports ordered consistently (see Custom ktlint EditorConfig properties for more) Rule id: import-ordering Indentation \u00b6 Indentation formatting - respects .editorconfig indent_size with no continuation indent (see EditorConfig section for more). Rule id: indent Max line length \u00b6 Ensures that lines do not exceed the given length of .editorconfig property max_line_length (see EditorConfig section for more). This rule does not apply in a number of situations. For example, in the case a line exceeds the maximum line length due to and comment that disables ktlint rules than that comment is being ignored when validating the length of the line. The .editorconfig property ktlint_ignore_back_ticked_identifier can be set to ignore identifiers which are enclosed in backticks, which for example is very useful when you want to allow longer names for unit tests. Rule id: max-line-length Modifier order \u00b6 Consistent order of modifiers Rule id: modifier-order Multiline if-else \u00b6 Braces required for multiline if/else statements. Rule id: multiline-if-else No blank lines before } \u00b6 No blank lines before } . Rule id: no-blank-line-before-rbrace No blank lines in chained method calls \u00b6 Rule id: no-blank-lines-in-chained-method-calls No consecutive blank lines \u00b6 Rule id: no-consecutive-blank-lines No empty ( {} ) class bodies \u00b6 Rule id: no-empty-class-body No leading empty lines in method blocks \u00b6 Rule id: no-empty-first-line-in-method-block No line break after else \u00b6 Disallows line breaks after the else keyword if that could lead to confusion, for example: if ( conditionA ()) { doSomething () } else if ( conditionB ()) { doAnotherThing () } Rule id: no-line-break-after-else No line break before assignment \u00b6 When a line is broken at an assignment ( = ) operator the break comes after the symbol. Rule id: no-line-break-before-assignment No multi spaces \u00b6 Except in indentation and in KDoc's it is not allowed to have multiple consecutive spaces. Rule id: no-multi-spaces No semicolons \u00b6 No semicolons (unless used to separate multiple statements on the same line). Rule id: no-semi No trailing whitespaces \u00b6 Rule id: no-trailing-spaces No Unit as return type \u00b6 The Unit type is not allowed as return type of a function. returns ( fun fn {} instead of fun fn: Unit {} ) Ktlint Disallowed fun fn () {} fun fn (): Unit {} Rule id: no-unit-return No unused imports \u00b6 Rule id: no-unused-imports No wildcard imports \u00b6 No wildcard imports except imports listed in .editorconfig property ij_kotlin_packages_to_use_import_on_demand . Rule id: no-wildcard-imports No underscores in package names \u00b6 Rule id: package-name Parameter list wrapping \u00b6 When class/function signature doesn't fit on a single line, each parameter must be on a separate line Rule id: parameter-list-wrapping String template \u00b6 Consistent string templates ( $v instead of ${v} , ${p.v} instead of ${p.v.toString()} ) Rule id: string-template Trailing comma on call site \u00b6 Consistent removal (default) or adding of trailing comma's on call site. Rule id: trailing-comma-on-call-site Trailing comma on declaration site \u00b6 Consistent removal (default) or adding of trailing comma's on declaration site. Rule id: trailing-comma-on-declaration-site Wrapping \u00b6 Inserts missing newlines (for example between parentheses of a multi-line function call). Rule id: wrapping Spacing \u00b6 Annotation spacing \u00b6 Annotations should be separated by a single line break. Rule id: annotation-spacing Colon spacing \u00b6 Consistent spacing around colon. Rule id: colon-spacing Comma spacing \u00b6 Consistent spacing around comma. Rule id: comma-spacing Comment spacing \u00b6 The end of line comment sign // should be preceded and followed by exactly a space. Rule id: comment-spacing Curly spacing \u00b6 Consistent spacing around curly braces. Rule id: curly-spacing Dot spacing \u00b6 Consistent spacing around dots. Rule id: dot-spacing Double colon spacing \u00b6 No spaces around :: . Rule id: double-colon-spacing Keyword spacing \u00b6 Consistent spacing around keywords. Rule id: keyword-spacing Operator spacing \u00b6 Consistent spacing around operators. Rule id: op-spacing Parenthesis spacing \u00b6 Consistent spacing around parenthesis. Rule id: paren-spacing Range spacing \u00b6 Consistent spacing around range operators. Rule id: range-spacing Angle bracket spacing \u00b6 No spaces around angle brackets when used for typing. Rule id: spacing-around-angle-brackets Blank line between declarations with annotations \u00b6 Declarations with annotations should be separated by a blank line. Rule id: spacing-between-declarations-with-annotations Blank line between declaration with comments \u00b6 Declarations with comments should be separated by a blank line. Rule id: spacing-between-declarations-with-comments Unary operator spacing \u00b6 No spaces around unary operators. Rule id: unary-op-spacing","title":"Standard rules"},{"location":"rules/standard/#annotation-formatting","text":"Multiple annotations should be on a separate line than the annotated declaration; annotations with parameters should each be on separate lines; annotations should be followed by a space Rule-id: annotation","title":"Annotation formatting"},{"location":"rules/standard/#argument-list-wrapping","text":"Rule-id: argument-list-wrapping","title":"Argument list wrapping"},{"location":"rules/standard/#chain-wrapping","text":"When wrapping chained calls . , ?. and ?: should be placed on the next line Rule id: chain-wrapping","title":"Chain wrapping"},{"location":"rules/standard/#enum-entry","text":"Enum entry names should be uppercase underscore-separated names. Rule id: enum-entry-name-case","title":"Enum entry"},{"location":"rules/standard/#file-name","text":"Files containing only one toplevel domain should be named according to that element. Rule id: filename","title":"File name"},{"location":"rules/standard/#final-newline","text":"Ensures consistent usage of a newline at the end of each file. This rule can be configured with .editorconfig property insert_final_newline . Rule id: final-newline","title":"Final newline"},{"location":"rules/standard/#import-ordering","text":"Imports ordered consistently (see Custom ktlint EditorConfig properties for more) Rule id: import-ordering","title":"Import ordering"},{"location":"rules/standard/#indentation","text":"Indentation formatting - respects .editorconfig indent_size with no continuation indent (see EditorConfig section for more). Rule id: indent","title":"Indentation"},{"location":"rules/standard/#max-line-length","text":"Ensures that lines do not exceed the given length of .editorconfig property max_line_length (see EditorConfig section for more). This rule does not apply in a number of situations. For example, in the case a line exceeds the maximum line length due to and comment that disables ktlint rules than that comment is being ignored when validating the length of the line. The .editorconfig property ktlint_ignore_back_ticked_identifier can be set to ignore identifiers which are enclosed in backticks, which for example is very useful when you want to allow longer names for unit tests. Rule id: max-line-length","title":"Max line length"},{"location":"rules/standard/#modifier-order","text":"Consistent order of modifiers Rule id: modifier-order","title":"Modifier order"},{"location":"rules/standard/#multiline-if-else","text":"Braces required for multiline if/else statements. Rule id: multiline-if-else","title":"Multiline if-else"},{"location":"rules/standard/#no-blank-lines-before","text":"No blank lines before } . Rule id: no-blank-line-before-rbrace","title":"No blank lines before }"},{"location":"rules/standard/#no-blank-lines-in-chained-method-calls","text":"Rule id: no-blank-lines-in-chained-method-calls","title":"No blank lines in chained method calls"},{"location":"rules/standard/#no-consecutive-blank-lines","text":"Rule id: no-consecutive-blank-lines","title":"No consecutive blank lines"},{"location":"rules/standard/#no-empty-class-bodies","text":"Rule id: no-empty-class-body","title":"No empty ({}) class bodies"},{"location":"rules/standard/#no-leading-empty-lines-in-method-blocks","text":"Rule id: no-empty-first-line-in-method-block","title":"No leading empty lines in method blocks"},{"location":"rules/standard/#no-line-break-after-else","text":"Disallows line breaks after the else keyword if that could lead to confusion, for example: if ( conditionA ()) { doSomething () } else if ( conditionB ()) { doAnotherThing () } Rule id: no-line-break-after-else","title":"No line break after else"},{"location":"rules/standard/#no-line-break-before-assignment","text":"When a line is broken at an assignment ( = ) operator the break comes after the symbol. Rule id: no-line-break-before-assignment","title":"No line break before assignment"},{"location":"rules/standard/#no-multi-spaces","text":"Except in indentation and in KDoc's it is not allowed to have multiple consecutive spaces. Rule id: no-multi-spaces","title":"No multi spaces"},{"location":"rules/standard/#no-semicolons","text":"No semicolons (unless used to separate multiple statements on the same line). Rule id: no-semi","title":"No semicolons"},{"location":"rules/standard/#no-trailing-whitespaces","text":"Rule id: no-trailing-spaces","title":"No trailing whitespaces"},{"location":"rules/standard/#no-unit-as-return-type","text":"The Unit type is not allowed as return type of a function. returns ( fun fn {} instead of fun fn: Unit {} ) Ktlint Disallowed fun fn () {} fun fn (): Unit {} Rule id: no-unit-return","title":"No Unit as return type"},{"location":"rules/standard/#no-unused-imports","text":"Rule id: no-unused-imports","title":"No unused imports"},{"location":"rules/standard/#no-wildcard-imports","text":"No wildcard imports except imports listed in .editorconfig property ij_kotlin_packages_to_use_import_on_demand . Rule id: no-wildcard-imports","title":"No wildcard imports"},{"location":"rules/standard/#no-underscores-in-package-names","text":"Rule id: package-name","title":"No underscores in package names"},{"location":"rules/standard/#parameter-list-wrapping","text":"When class/function signature doesn't fit on a single line, each parameter must be on a separate line Rule id: parameter-list-wrapping","title":"Parameter list wrapping"},{"location":"rules/standard/#string-template","text":"Consistent string templates ( $v instead of ${v} , ${p.v} instead of ${p.v.toString()} ) Rule id: string-template","title":"String template"},{"location":"rules/standard/#trailing-comma-on-call-site","text":"Consistent removal (default) or adding of trailing comma's on call site. Rule id: trailing-comma-on-call-site","title":"Trailing comma on call site"},{"location":"rules/standard/#trailing-comma-on-declaration-site","text":"Consistent removal (default) or adding of trailing comma's on declaration site. Rule id: trailing-comma-on-declaration-site","title":"Trailing comma on declaration site"},{"location":"rules/standard/#wrapping","text":"Inserts missing newlines (for example between parentheses of a multi-line function call). Rule id: wrapping","title":"Wrapping"},{"location":"rules/standard/#spacing","text":"","title":"Spacing"},{"location":"rules/standard/#annotation-spacing","text":"Annotations should be separated by a single line break. Rule id: annotation-spacing","title":"Annotation spacing"},{"location":"rules/standard/#colon-spacing","text":"Consistent spacing around colon. Rule id: colon-spacing","title":"Colon spacing"},{"location":"rules/standard/#comma-spacing","text":"Consistent spacing around comma. Rule id: comma-spacing","title":"Comma spacing"},{"location":"rules/standard/#comment-spacing","text":"The end of line comment sign // should be preceded and followed by exactly a space. Rule id: comment-spacing","title":"Comment spacing"},{"location":"rules/standard/#curly-spacing","text":"Consistent spacing around curly braces. Rule id: curly-spacing","title":"Curly spacing"},{"location":"rules/standard/#dot-spacing","text":"Consistent spacing around dots. Rule id: dot-spacing","title":"Dot spacing"},{"location":"rules/standard/#double-colon-spacing","text":"No spaces around :: . Rule id: double-colon-spacing","title":"Double colon spacing"},{"location":"rules/standard/#keyword-spacing","text":"Consistent spacing around keywords. Rule id: keyword-spacing","title":"Keyword spacing"},{"location":"rules/standard/#operator-spacing","text":"Consistent spacing around operators. Rule id: op-spacing","title":"Operator spacing"},{"location":"rules/standard/#parenthesis-spacing","text":"Consistent spacing around parenthesis. Rule id: paren-spacing","title":"Parenthesis spacing"},{"location":"rules/standard/#range-spacing","text":"Consistent spacing around range operators. Rule id: range-spacing","title":"Range spacing"},{"location":"rules/standard/#angle-bracket-spacing","text":"No spaces around angle brackets when used for typing. Rule id: spacing-around-angle-brackets","title":"Angle bracket spacing"},{"location":"rules/standard/#blank-line-between-declarations-with-annotations","text":"Declarations with annotations should be separated by a blank line. Rule id: spacing-between-declarations-with-annotations","title":"Blank line between declarations with annotations"},{"location":"rules/standard/#blank-line-between-declaration-with-comments","text":"Declarations with comments should be separated by a blank line. Rule id: spacing-between-declarations-with-comments","title":"Blank line between declaration with comments"},{"location":"rules/standard/#unary-operator-spacing","text":"No spaces around unary operators. Rule id: unary-op-spacing","title":"Unary operator spacing"}]}